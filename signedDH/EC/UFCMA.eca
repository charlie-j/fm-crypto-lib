require import AllCore FSet FMap.

type pkey, skey, sig, msg.

module type SigScheme = {
  proc keygen(): pkey * skey
  proc sign(_: skey, _: msg): sig
  proc verify(_: pkey, _: msg, _: sig): bool
}.

module type CMA_Oracles = {
  proc gen(): pkey
  proc corrupt(_: int): skey option

  proc sign(_: int, _: msg): sig option
}.

module type CMA_Adv (O : CMA_Oracles) = {
  proc forge(): int * msg * sig
}.

module UFCMA (S : SigScheme) (A : CMA_Adv) = {
  var n: int

  var s_map: (int, pkey * skey) fmap

  var q: (int * msg) fset
  var cr: int fset

  module Oracles = {
    proc gen() = {
      var pk, sk;

      n <- n + 1;
      (pk, sk) <@ S.keygen();
      s_map.[n] <- (pk, sk);
      return pk;
    }

    proc corrupt(j) = {
      var pk, sk;
      var r <- None;

      if (s_map.[j] is Some kp) { (* Equivalently: 0 < j <= n *)
        (pk, sk) <- kp;
        r <- Some sk;
        cr <- cr `|` fset1 j;
      }
      return r;
    }

    proc sign(h_s, m) = {
      var sig, pk, sk;
      var r <- None;

      if (s_map.[h_s] is Some kp) {
        (pk, sk) <- kp;
        sig <@ S.sign(sk, m);
        r <- Some sig;
        q <- q `|` fset1 (h_s, m);
      }
      return r;
    }
  }

  proc run() = {
    var j, m, sig, pk, sk;
    var b <- false;

    n <- 0;
    q <- fset0;
    cr <- fset0;
    (j, m, sig) <@ A(Oracles).forge();
    if (0 < j < n /\ j \notin cr /\ (j, m) \notin q) {
      (pk, sk) <- oget s_map.[j];
      b <@ S.verify(pk, m, sig);
    }
    return b;
  }
}.

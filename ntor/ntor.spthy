/*
 * Protocol:	  NTOR
 * Modeler: 	  Aurora Naska
 * Date:        February 2025
 *
 * Status: 	    Finished
 * 
 * attacker:    active
 * sessions:    unbounded ∞ 
 * agents:      unbounded ∞ 
 * compromises: long-term keys (LTK)
 * primitives:  hash, diffie-hellman
 * properties:  executability, session_key_secrecy, forward_secrecy, client_side_authentication
 * difficulty:  easy
 *
==============================================================================
  summary of summaries:

  analyzed: ntor.spthy

  processing time: 0.72s
  
  ExecutabilityClient (exists-trace): verified (2 steps)
  ExecutabilityServer (exists-trace): verified (4 steps)
  ExecutabilityClientEnd (exists-trace): verified (7 steps)
  BothPartiesCanReachEnd (exists-trace): verified (8 steps)
  ServerKeySecrecy (all-traces): falsified - found trace (8 steps)
  SessionKey_Secrecy (all-traces): verified (20 steps)
  ForwardSecrecy (all-traces): verified (20 steps)
  ClientSide_Authentication (all-traces): verified (13 steps)
  Unique_Commits (all-traces): verified (10 steps)

==============================================================================
 *
 */
 
theory ntor
begin

builtins: diffie-hellman
functions: hash5/5, hash2/2

/* This is a restriction that ensures in any rule with the Eq(x,y) action, the terms
matched by the variables x and y are the same. The modeler can then add an Eq action to 
any rule where such an equality is desired, e.g., check that signature verification succeeds.
*/
restriction Eq:
  "All x y #i. Eq(x, y) @ #i ==> x = y"

// Generate Server's long-term (s_sk, s_pk)
rule generate_serverLtk:
  let pkS = 'g'^~sk 
  in
  [ Fr(~sk) ]
  -->
  [ !Ltk($S, ~sk), 
    !Pk($S, pkS), 
    Out(pkS) ]

// Client generates DH pair, and sends public key
rule Client_Init:
  let x_pk = 'g'^~x_sk
  in
  [ Fr(~x_sk)]
  --[ ClientInitMessage()]->
  [ Out(<x_pk>), StateC($C, ~x_sk), !EK($C, ~x_sk) ]

// Server generates own DH pair, computes master key mk_S as a hash of the public DH keys of both 
// parties, the public signing key of server, and DH outputs: x_pk^y_sk, x_pk^s_sk .
// Computes from mk_S an authentication hash and session key K_S.
rule Server_Init:
  let 
    y_pk = 'g'^~y_sk
    s_pk = 'g'^~s_sk
    dh_output1 = x_pk^~y_sk
    dh_output2 = x_pk^~s_sk
    mk_S = hash5(x_pk, y_pk, s_pk, dh_output1, dh_output2)
    auth = hash2(mk_S, '0')
    K_S = hash2(mk_S, '1')
    m = <y_pk, auth>
  in
  [ !Ltk($S, ~s_sk), 
    Fr(~y_sk)
  , In(x_pk) ]
  --[ ServerInitMessage(),
      ServerAccepts($S, x_pk, y_pk, s_pk, auth, K_S),
      SecretServer($S, K_S) ]->
  [ Out(m) ]

// Client computes master key mk_C, verifies the authentication tag auth, and computes session key K_C.
rule Client_Accepts:
  let
    m = <y_pk, auth>
    x_pk = 'g'^~x_sk
    dh_output1 = y_pk^~x_sk
    dh_output2 = s_pk^~x_sk
    mk_C = hash5(x_pk, y_pk, s_pk, dh_output1, dh_output2)
    auth_c = hash2(mk_C, '0')
    K_C = hash2(mk_C, '1')
  in
  [ StateC($C, ~x_sk),
    !Pk($S, s_pk),
    In(m) ]
  --[  Eq(auth, auth_c),
      ClientAccepts($S, x_pk, y_pk, s_pk, auth, K_C),
      SecretClient($S, K_C),
      ClientRecvMessage()]->
  [ ]

//Attacker learns the server's long-term key
rule Compromise_LTK:
  [ !Ltk($S, ~sk)]
  --[CompromiseLtk($S, ~sk)]->
  [ Out(~sk) ]

//Attacker learns the emphemeral kem key
rule Compromise_DHKey:
  [  !EK($C, ~z_sk)]
  --[CompromiseDHKey($C, ~z_sk)]->
  [ Out(~z_sk) ]

// Sanity Traces to check executability of the model
lemma ExecutabilityClient:
  exists-trace
  "Ex #i. ClientInitMessage() @ #i"

lemma ExecutabilityServer:
  exists-trace
  "Ex #i. ServerInitMessage() @ #i"

lemma ExecutabilityClientEnd:
  exists-trace
  "Ex #i. ClientRecvMessage() @ #i"

lemma BothPartiesCanReachEnd:
  exists-trace
  "Ex S x_pk y_pk s_pk auth key #i #j. i < j &
     ServerAccepts(S, x_pk, y_pk, s_pk, auth, key) @ #i &
   ClientAccepts(S, x_pk, y_pk, s_pk, auth, key) @ #j "


// Secrecy of established session key
// Does not hold. (The client could have been an attacker, therefore it knows the established key.)
lemma ServerKeySecrecy:
  "All S key #i. SecretServer(S, key) @ #i 
    ==> 
      not(Ex #j. K(key) @ #j)
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)"


// If a client establishes successfully a session with key: sesskey, the attacker does not know 
// this secret, unless they compromise the server's long-term key or the DH ephemeral keys.
lemma SessionKey_Secrecy:
  "All S sessKey #i. 
      SecretClient(S, sessKey) @ #i 
    ==> 
      not(Ex #j. K(sessKey) @ #j)
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)
    | (Ex A dh_sk #j. CompromiseDHKey(A, dh_sk) @ #j)"

// The attacker cannot learn the session key, even if they compromise the server in the future
// unless they have compromised the DH ephemeral keys.
lemma ForwardSecrecy:
  "All S sessKey #i #k. 
      SecretClient(S, sessKey) @ #i &
      K(sessKey) @ k
    ==>
      (Ex s_sk #j. CompromiseLtk(S, s_sk) @ j & j < i)
    | (Ex A dh_sk #j. CompromiseDHKey(A, dh_sk) @ #j)"

// At the end of the protocol, if the client establishes a session with key: sessKey,
// then there is a corresponding server S session with the same parameters, and
// there are no two commits with the same parameters.
// Otherwise the server was compromised
lemma ClientSide_Authentication:
  "All S x_pk y_pk s_pk auth key #i. 
      ClientAccepts(S, x_pk, y_pk, s_pk, auth, key) @ #i 
   ==>  
      (Ex #j. j<i & ServerAccepts(S, x_pk, y_pk, s_pk, auth, key) @ #j)
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)
    | (Ex A dh_sk #j. CompromiseDHKey(A, dh_sk) @ #j)"

lemma Unique_Commits:
  "All S x_pk y_pk s_pk auth key #i #j. 
      ClientAccepts(S, x_pk, y_pk, s_pk, auth, key) @ #i   &
      ClientAccepts(S, x_pk, y_pk, s_pk, auth, key) @ #j
    ==> #i=#j"

end
